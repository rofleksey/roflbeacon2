// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
)

// Defines values for GeneralError.
const (
	GeneralErrorTrue GeneralError = true
)

// AccountStatus defines model for AccountStatus.
type AccountStatus struct {
	InsideFences  []int64       `json:"insideFences"`
	StillLocation *LocationData `json:"stillLocation,omitempty"`
}

// BatteryData defines model for BatteryData.
type BatteryData struct {
	Charging bool `json:"charging"`
	Level    int  `json:"level"`
}

// General defines model for General.
type General struct {
	Error      GeneralError `json:"error"`
	Msg        string       `json:"msg"`
	StatusCode int          `json:"statusCode,omitempty"`
}

// GeneralError defines model for General.Error.
type GeneralError bool

// LocationData defines model for LocationData.
type LocationData struct {
	Accuracy  float64 `json:"accuracy"`
	Address   *string `json:"address,omitempty"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

// UpdateData defines model for UpdateData.
type UpdateData struct {
	Battery  *BatteryData  `json:"battery,omitempty"`
	Error    *string       `json:"error,omitempty"`
	Location *LocationData `json:"location,omitempty"`
}

// IngestUpdateJSONRequestBody defines body for IngestUpdate for application/json ContentType.
type IngestUpdateJSONRequestBody = UpdateData

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Ingest Updates
	// (POST /update/ingest)
	IngestUpdate(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// IngestUpdate operation middleware
func (siw *ServerInterfaceWrapper) IngestUpdate(c *fiber.Ctx) error {

	return siw.Handler.IngestUpdate(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/update/ingest", wrapper.IngestUpdate)

}

type IngestUpdateRequestObject struct {
	Body *IngestUpdateJSONRequestBody
}

type IngestUpdateResponseObject interface {
	VisitIngestUpdateResponse(ctx *fiber.Ctx) error
}

type IngestUpdate200Response struct {
}

func (response IngestUpdate200Response) VisitIngestUpdateResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type IngestUpdate400JSONResponse General

func (response IngestUpdate400JSONResponse) VisitIngestUpdateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type IngestUpdate401JSONResponse General

func (response IngestUpdate401JSONResponse) VisitIngestUpdateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type IngestUpdate403JSONResponse General

func (response IngestUpdate403JSONResponse) VisitIngestUpdateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type IngestUpdate500JSONResponse General

func (response IngestUpdate500JSONResponse) VisitIngestUpdateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Ingest Updates
	// (POST /update/ingest)
	IngestUpdate(ctx context.Context, request IngestUpdateRequestObject) (IngestUpdateResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// IngestUpdate operation middleware
func (sh *strictHandler) IngestUpdate(ctx *fiber.Ctx) error {
	var request IngestUpdateRequestObject

	var body IngestUpdateJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.IngestUpdate(ctx.UserContext(), request.(IngestUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IngestUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(IngestUpdateResponseObject); ok {
		if err := validResponse.VisitIngestUpdateResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xUTW8TMRD9K9HAccmmH3DYWwMUReKAWvVU9TDxThIXr23G44hQ7X9HtpPmU2qFUE9r",
	"e8cz77154ydQrvPOkpUAzRMEtaAO8/JKKRet3ApKzAeenScWTXmnbdAtXZNV671Qlxczxx0KNKCtfLqE",
	"CmTlqWxpTgz98wky4yrtg2hjvjuFop1NOd4zzaCBd/UWXb2GVm/ivqAg9H0FTL+iZmqhud9H9fBcyU0f",
	"SUkqNUYR4lW+fMRJLZDn2s7Ten1z6pwhtOmqoSWZnV/PhA4wlLhqm+0Ujm9kidEcYyBmx2nR0gyjEWiE",
	"I1VANnbQ3KfNNt8Oui7swg7CqXLWNvXvs2vpBPQKfn9wXWqdl1WpdMim4Cn597KdYrXXmyNqqFRkVKs9",
	"l7QuTg1tbWJjNy0uwbZlCuEkK4OiJRZOr0hlnJ2/Pv6wn5tau3mqLZtTQtz5FoVOyzAtFnzJ57tO7aut",
	"L461+NfBOUCdjrSduTwJzgoqSUuLXYq6cTMzJlTOQgWRDTSwEPGhqetpPh6ymxn6GWg15JinXIvZv3k+",
	"uPoxgQqWxCEDhrPhaDhKwc6TRa+hgYvhaJieDY+yyHrVMYtZazunkCF5V75J1Uxp0kIDk/y/KA+lhRRk",
	"7NrVhhHZfA29N7poUT+GIlwR6SUJd9ra79skj046CN7ZUBp9PhqVQQ6KtS8tgtuoVHJ1X8Fl+f9fkG3e",
	"kwxrv+IY28FNEaNUPXuLqncWoywc6z/UlrIXb1H22vFUty3lN/Hj2wg8sUJs0QxuiZfEg695VFNciF2H",
	"adTX5hwUA4WSJeTwAM39oUnKmJQpq5dn0D/0fwMAAP//c0Jy4KoHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
