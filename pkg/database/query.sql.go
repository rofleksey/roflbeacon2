// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
	"time"

	"roflbeacon2/app/api"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (token, name, chat_id, status)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateAccountParams struct {
	Token  string
	Name   string
	ChatID *int64
	Status api.AccountStatus
}

// CreateAccount
//
//	INSERT INTO account (token, name, chat_id, status)
//	VALUES ($1, $2, $3, $4)
//	RETURNING id
func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (int64, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Token,
		arg.Name,
		arg.ChatID,
		arg.Status,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createFence = `-- name: CreateFence :one
INSERT INTO fence (name, longitude, latitude, radius)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateFenceParams struct {
	Name      string
	Longitude float64
	Latitude  float64
	Radius    float64
}

// CreateFence
//
//	INSERT INTO fence (name, longitude, latitude, radius)
//	VALUES ($1, $2, $3, $4)
//	RETURNING id
func (q *Queries) CreateFence(ctx context.Context, arg CreateFenceParams) (int64, error) {
	row := q.db.QueryRow(ctx, createFence,
		arg.Name,
		arg.Longitude,
		arg.Latitude,
		arg.Radius,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createMigration = `-- name: CreateMigration :one
INSERT INTO migration (id, applied)
VALUES ($1, $2)
RETURNING id
`

type CreateMigrationParams struct {
	ID      string
	Applied time.Time
}

// CreateMigration
//
//	INSERT INTO migration (id, applied)
//	VALUES ($1, $2)
//	RETURNING id
func (q *Queries) CreateMigration(ctx context.Context, arg CreateMigrationParams) (string, error) {
	row := q.db.QueryRow(ctx, createMigration, arg.ID, arg.Applied)
	var id string
	err := row.Scan(&id)
	return id, err
}

const createUpdate = `-- name: CreateUpdate :one
INSERT INTO updates (account_id, created, data)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateUpdateParams struct {
	AccountID int64
	Created   time.Time
	Data      api.UpdateData
}

// CreateUpdate
//
//	INSERT INTO updates (account_id, created, data)
//	VALUES ($1, $2, $3)
//	RETURNING id
func (q *Queries) CreateUpdate(ctx context.Context, arg CreateUpdateParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUpdate, arg.AccountID, arg.Created, arg.Data)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteFence = `-- name: DeleteFence :exec
DELETE
FROM fence
WHERE id = $1
`

// DeleteFence
//
//	DELETE
//	FROM fence
//	WHERE id = $1
func (q *Queries) DeleteFence(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteFence, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, token, name, chat_id, status
FROM account
WHERE id = $1
LIMIT 1
`

// GetAccount
//
//	SELECT id, token, name, chat_id, status
//	FROM account
//	WHERE id = $1
//	LIMIT 1
func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Name,
		&i.ChatID,
		&i.Status,
	)
	return i, err
}

const getAccountByChatID = `-- name: GetAccountByChatID :one
SELECT id, token, name, chat_id, status
FROM account
WHERE chat_id = $1
LIMIT 1
`

// GetAccountByChatID
//
//	SELECT id, token, name, chat_id, status
//	FROM account
//	WHERE chat_id = $1
//	LIMIT 1
func (q *Queries) GetAccountByChatID(ctx context.Context, chatID *int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByChatID, chatID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Name,
		&i.ChatID,
		&i.Status,
	)
	return i, err
}

const getAccountByToken = `-- name: GetAccountByToken :one
SELECT id, token, name, chat_id, status
FROM account
WHERE token = $1
LIMIT 1
`

// GetAccountByToken
//
//	SELECT id, token, name, chat_id, status
//	FROM account
//	WHERE token = $1
//	LIMIT 1
func (q *Queries) GetAccountByToken(ctx context.Context, token string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByToken, token)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Name,
		&i.ChatID,
		&i.Status,
	)
	return i, err
}

const getAllAccounts = `-- name: GetAllAccounts :many
SELECT id, token, name, chat_id, status
FROM account
ORDER BY id
`

// GetAllAccounts
//
//	SELECT id, token, name, chat_id, status
//	FROM account
//	ORDER BY id
func (q *Queries) GetAllAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, getAllAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Token,
			&i.Name,
			&i.ChatID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFences = `-- name: GetAllFences :many
SELECT id, name, longitude, latitude, radius
FROM fence
`

// GetAllFences
//
//	SELECT id, name, longitude, latitude, radius
//	FROM fence
func (q *Queries) GetAllFences(ctx context.Context) ([]Fence, error) {
	rows, err := q.db.Query(ctx, getAllFences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Fence{}
	for rows.Next() {
		var i Fence
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Longitude,
			&i.Latitude,
			&i.Radius,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastUpdateByAccountID = `-- name: GetLastUpdateByAccountID :many
SELECT id, account_id, created, data
FROM updates
WHERE account_id = $1
ORDER BY id DESC
LIMIT 1
`

// GetLastUpdateByAccountID
//
//	SELECT id, account_id, created, data
//	FROM updates
//	WHERE account_id = $1
//	ORDER BY id DESC
//	LIMIT 1
func (q *Queries) GetLastUpdateByAccountID(ctx context.Context, accountID int64) ([]Update, error) {
	rows, err := q.db.Query(ctx, getLastUpdateByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Update{}
	for rows.Next() {
		var i Update
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Created,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestUpdatesByAccountID = `-- name: GetLatestUpdatesByAccountID :many
SELECT id, account_id, created, data
FROM updates
WHERE account_id = $1
ORDER BY id DESC
LIMIT 10
`

// GetLatestUpdatesByAccountID
//
//	SELECT id, account_id, created, data
//	FROM updates
//	WHERE account_id = $1
//	ORDER BY id DESC
//	LIMIT 10
func (q *Queries) GetLatestUpdatesByAccountID(ctx context.Context, accountID int64) ([]Update, error) {
	rows, err := q.db.Query(ctx, getLatestUpdatesByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Update{}
	for rows.Next() {
		var i Update
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Created,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMigrations = `-- name: GetMigrations :many
SELECT id, applied
FROM migration
ORDER BY id
`

// GetMigrations
//
//	SELECT id, applied
//	FROM migration
//	ORDER BY id
func (q *Queries) GetMigrations(ctx context.Context) ([]Migration, error) {
	rows, err := q.db.Query(ctx, getMigrations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Migration{}
	for rows.Next() {
		var i Migration
		if err := rows.Scan(&i.ID, &i.Applied); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountStatus = `-- name: UpdateAccountStatus :exec
UPDATE account
SET status = $2
WHERE id = $1
`

type UpdateAccountStatusParams struct {
	ID     int64
	Status api.AccountStatus
}

// UpdateAccountStatus
//
//	UPDATE account
//	SET status = $2
//	WHERE id = $1
func (q *Queries) UpdateAccountStatus(ctx context.Context, arg UpdateAccountStatusParams) error {
	_, err := q.db.Exec(ctx, updateAccountStatus, arg.ID, arg.Status)
	return err
}

const updateFence = `-- name: UpdateFence :exec
UPDATE fence
SET name      = $2,
    longitude = $3,
    latitude  = $4,
    radius    = $5
WHERE id = $1
`

type UpdateFenceParams struct {
	ID        int64
	Name      string
	Longitude float64
	Latitude  float64
	Radius    float64
}

// UpdateFence
//
//	UPDATE fence
//	SET name      = $2,
//	    longitude = $3,
//	    latitude  = $4,
//	    radius    = $5
//	WHERE id = $1
func (q *Queries) UpdateFence(ctx context.Context, arg UpdateFenceParams) error {
	_, err := q.db.Exec(ctx, updateFence,
		arg.ID,
		arg.Name,
		arg.Longitude,
		arg.Latitude,
		arg.Radius,
	)
	return err
}
